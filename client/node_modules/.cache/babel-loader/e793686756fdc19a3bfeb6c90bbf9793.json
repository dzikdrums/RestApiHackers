{"ast":null,"code":"import axios from 'axios';\nimport { API_URL } from '../config';\n/* SELECTORS */\n\nexport const getConcerts = ({\n  concerts\n}) => concerts.data;\nexport const getRequest = ({\n  concerts\n}) => concerts.request;\n/* ACTIONS */\n// action name creator\n\nconst reducerName = 'concerts';\n\nconst createActionName = name => `app/${reducerName}/${name}`;\n\nconst START_REQUEST = createActionName('START_REQUEST');\nconst END_REQUEST = createActionName('END_REQUEST');\nconst ERROR_REQUEST = createActionName('ERROR_REQUEST');\nconst LOAD_CONCERTS = createActionName('LOAD_CONCERTS');\nexport const startRequest = () => ({\n  type: START_REQUEST\n});\nexport const endRequest = () => ({\n  type: END_REQUEST\n});\nexport const errorRequest = error => ({\n  error,\n  type: ERROR_REQUEST\n});\nexport const loadConcerts = payload => ({\n  payload,\n  type: LOAD_CONCERTS\n});\n/* THUNKS */\n\nexport const loadConcertsRequest = () => {\n  return async dispatch => {\n    dispatch(startRequest());\n\n    try {\n      let res = await axios.get(`${API_URL}/concerts`);\n      dispatch(loadConcerts(res.data));\n      dispatch(endRequest());\n    } catch (e) {\n      dispatch(errorRequest(e.message));\n    }\n  };\n};\n/* INITIAL STATE */\n\nconst initialState = {\n  data: [],\n  request: {\n    pending: false,\n    error: null,\n    success: null\n  }\n};\n/* REDUCER */\n\nexport default function reducer(statePart = initialState, action = {}) {\n  switch (action.type) {\n    case LOAD_CONCERTS:\n      return { ...statePart,\n        data: [...action.payload]\n      };\n\n    case START_REQUEST:\n      return { ...statePart,\n        request: {\n          pending: true,\n          error: null,\n          success: false\n        }\n      };\n\n    case END_REQUEST:\n      return { ...statePart,\n        request: {\n          pending: false,\n          error: null,\n          success: true\n        }\n      };\n\n    case ERROR_REQUEST:\n      return { ...statePart,\n        request: {\n          pending: false,\n          error: action.error,\n          success: false\n        }\n      };\n\n    default:\n      return statePart;\n  }\n}","map":{"version":3,"sources":["/Users/macus/Desktop/Rest of Projects/RestApiHackers/client/src/redux/concertsRedux.js"],"names":["axios","API_URL","getConcerts","concerts","data","getRequest","request","reducerName","createActionName","name","START_REQUEST","END_REQUEST","ERROR_REQUEST","LOAD_CONCERTS","startRequest","type","endRequest","errorRequest","error","loadConcerts","payload","loadConcertsRequest","dispatch","res","get","e","message","initialState","pending","success","reducer","statePart","action"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport { API_URL } from '../config';\r\n\r\n/* SELECTORS */\r\nexport const getConcerts = ({ concerts }) => concerts.data;\r\nexport const getRequest = ({ concerts }) => concerts.request;\r\n\r\n/* ACTIONS */\r\n\r\n// action name creator\r\nconst reducerName = 'concerts';\r\nconst createActionName = name => `app/${reducerName}/${name}`;\r\n\r\nconst START_REQUEST = createActionName('START_REQUEST');\r\nconst END_REQUEST = createActionName('END_REQUEST');\r\nconst ERROR_REQUEST = createActionName('ERROR_REQUEST');\r\n\r\nconst LOAD_CONCERTS = createActionName('LOAD_CONCERTS');\r\n\r\nexport const startRequest = () => ({ type: START_REQUEST });\r\nexport const endRequest = () => ({ type: END_REQUEST });\r\nexport const errorRequest = error => ({ error, type: ERROR_REQUEST });\r\n\r\nexport const loadConcerts = payload => ({ payload, type: LOAD_CONCERTS });\r\n\r\n/* THUNKS */\r\n\r\nexport const loadConcertsRequest = () => {\r\n  return async dispatch => {\r\n\r\n    dispatch(startRequest());\r\n    try {\r\n\r\n      let res = await axios.get(`${API_URL}/concerts`);\r\n      dispatch(loadConcerts(res.data));\r\n      dispatch(endRequest());\r\n\r\n    } catch(e) {\r\n      dispatch(errorRequest(e.message));\r\n    }\r\n\r\n  };\r\n};\r\n\r\n/* INITIAL STATE */\r\n\r\nconst initialState = {\r\n  data: [],\r\n  request: {\r\n    pending: false,\r\n    error: null,\r\n    success: null,\r\n  },\r\n};\r\n\r\n/* REDUCER */\r\n\r\nexport default function reducer(statePart = initialState, action = {}) {\r\n  switch (action.type) {\r\n    case LOAD_CONCERTS: \r\n      return { ...statePart, data: [...action.payload] };\r\n    case START_REQUEST:\r\n      return { ...statePart, request: { pending: true, error: null, success: false } };\r\n    case END_REQUEST:\r\n      return { ...statePart, request: { pending: false, error: null, success: true } };\r\n    case ERROR_REQUEST:\r\n      return { ...statePart, request: { pending: false, error: action.error, success: false } };\r\n    default:\r\n      return statePart;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}